// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UnitKerja {
  id              Int         @id @default(autoincrement())
  parent_id       Int?
  parentUnitKerja UnitKerja?  @relation("UnitKerjaParent", fields: [parent_id], references: [id])
  name            String
  createdAt       DateTime    @default(now()) @map(name: "created_at")
  updatedAt       DateTime    @updatedAt @map(name: "updated_at")
  Employee        Employee[]  @relation("unitEmployeerel")
  // This is the opposite relation, pointing to all child units
  childUnitKerja  UnitKerja[] @relation("UnitKerjaParent") // This is the reverse relation
  pejabat_id      Int?
  pejabat         Employee?   @relation(fields: [pejabat_id], references: [id])

  @@map(name: "unit_kerja")
}

model Employee {
  id           Int           @id @default(autoincrement())
  name         String
  email        String?       @unique
  unit_id      Int
  unitEmployee UnitKerja     @relation("unitEmployeerel", fields: [unit_id], references: [id])
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map(name: "updated_at")
  UnitKerja    UnitKerja[]
  RiwayatAnak  RiwayatAnak[] @relation("riwayat_anak")

  @@map(name: "employees")
}

model RiwayatAnak {
  id          Int      @id @default(autoincrement())
  employee_id Int
  employee    Employee @relation("riwayat_anak", fields: [employee_id], references: [id])
  name String 
  birth_date DateTime?
  createdAt DateTime @default(now()) @map(name:"created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
 
  @@map(name: "riwayat_anak")
}
